{
	"info": {
		"_postman_id": "2e4b7a9d-0f38-468e-b793-8ccb2e1ee99d",
		"name": "ASK_Tests_Dmitry",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "31767710",
		"_collection_link": "https://www.postman.com/lunar-star-619596/workspace/mar24/collection/31767710-2e4b7a9d-0f38-468e-b793-8ccb2e1ee99d?action=share&source=collection_link&creator=31767710"
	},
	"item": [
		{
			"name": "/sign-up [S]Create new user as student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Responce message = User was created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"User was created\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{studentEmail}}\",\r\n  \"name\": \"Jon Snow\",\r\n  \"group\":\"XYZ\",\r\n  \"password\": \"{{studentPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/sign-up"
			},
			"response": []
		},
		{
			"name": "localhost:3000/ New student activation code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData=pm.response.json();\r",
							"\r",
							"pm.environment.set(\"activationCode\", jsonData[0].activationCode);\r",
							"pm.environment.set(\"studentId\", jsonData[0].id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,{{studentEmail}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/activate Activate new user from DB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"\tpm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string - User was activated\", function () {\r",
							"\tpm.expect(pm.response.text()).to.include(\"User was activated\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/activate/{{studentId}}/{{activationCode}}"
			},
			"response": []
		},
		{
			"name": "sign-in - [Teacher]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify user role = TEACHER\", function () {\r",
							"\tpm.expect(pm.response.text()).to.include(\"TEACHER\");\r",
							"});\r",
							"\r",
							"\tvar jsonData = pm.response.json();\r",
							"pm.environment.set(\"teacherToken\", jsonData.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"nguyentai@udinnews.com\",\r\n  \"password\": \"ABC123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/sign-in"
			},
			"response": []
		},
		{
			"name": "sign-in - [Teacher]Invalid password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"nguyentai@udinnews.com\",\r\n  \"password\": \"ABC1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/sign-in"
			},
			"response": []
		},
		{
			"name": "sign-in - [Student]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Verify user role = STUDENT\", function () {\r",
							"    pm.expect(jsonData.user.role).to.eql(\"STUDENT\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.environment.set(\"studentToken\", jsonData.token);\r",
							"\r",
							"pm.environment.set(\"studentId\", jsonData.user.id);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{studentToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{studentEmail}}\",\r\n  \"password\": \"{{studentPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/sign-in"
			},
			"response": []
		},
		{
			"name": "quiz - [Teacher] Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"quizId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Demo quiz Dmitry 04/10/2024\",\r\n  \"totalScore\": 18,\r\n  \"passingPercentage\": 75,\r\n  \"showStopperQuestion\": 1,\r\n  \"questions\": [\r\n    {\r\n      \"type\": \"TEXTUAL\",\r\n      \"question\": \"What is your name?\",\r\n      \"score\": 5\r\n    },\r\n    {\r\n      \"type\": \"SINGLE_CHOICE\",\r\n      \"question\": \"Which city is city largest in California?\",\r\n      \"score\": 7,\r\n      \"answer\": 2,\r\n      \"hasOtherOption\": false,\r\n      \"options\": [\r\n        \"San Francisco\",\r\n        \"Sacramento\",\r\n        \"Los Angeles\",\r\n        \"Redding\"\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"MULTIPLE_CHOICE\",\r\n      \"question\": \"Who was apple founded by?\",\r\n      \"score\": 6,\r\n      \"answers\": [\r\n        0,\r\n        1,\r\n        2\r\n      ],\r\n      \"hasOtherOption\": true,\r\n      \"options\": [\r\n        \"Steve Jobs\",\r\n        \"Steve Wozniak\",\r\n        \"Ronald Wayne\",\r\n        \"Ronald Reagan\"\r\n      ]\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/quiz"
			},
			"response": []
		},
		{
			"name": "quizzes - [Teacher] list of quizzes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"var myQuiz= pm.environment.get(\"quizId\");\r",
							"\r",
							"pm.test(\"Verify the number of quiz created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[jsonData.length-1].id).to.eql(myQuiz);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/quizzes"
			},
			"response": []
		},
		{
			"name": "/assignment [Teacher] Create new assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" var jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"assignmentId\", jsonData[jsonData.length-1].id);\r",
							"\r",
							"pm.environment.set(\"assignmentGroupId\", jsonData[jsonData.length-1].assignmentGroupID);\r",
							"\r",
							"pm.test(\"Verify status, result and gradedBy of assignment before submission\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"ASSIGNED\");\r",
							"\t\tpm.expect(jsonData[jsonData.length-1].result).to.eql(\"PENDING\");\r",
							"\t\tpm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"NONE\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quizId\": {{quizId}},\r\n  \"userIds\": [{{studentId}}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/assignment"
			},
			"response": []
		},
		{
			"name": "/assignment [Student] Submit assignment result",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status, result, gradedBy - after submission\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");\r",
							"    pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");\r",
							"    pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"AUTOMATIC\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{studentToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"assignmentId\": {{assignmentId}},\r\n\t\"answers\": [\r\n\t\t{\r\n\t\t\t\"textAnswer\": \"Correct\",\r\n\t\t\t\"answer\": null\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"textAnswer\": \"\",\r\n\t\t\t\"answer\": 2\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"textAnswer\": \"\",\r\n\t\t\t\"answer\": [\r\n\t\t\t\t0,\r\n\t\t\t\t1,\r\n\t\t\t\t2\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/submit-assignment"
			},
			"response": []
		},
		{
			"name": "/assignment [Teacher] Grade assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status, result and gradedBy after manual grading\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");\r",
							"    pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");\r",
							"    pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"TEACHER\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"summary\": \"Summary from teacher\",\r\n  \"result\": \"PASSED\",\r\n  \"grades\": [\r\n    {\r\n      \"comment\": \"Teacher comment\",\r\n      \"additionalScore\": 5\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/assignment/{{assignmentId}}"
			},
			"response": []
		},
		{
			"name": "quiz/ID - [Teacher]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Message - Quiz was deleted\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Quiz was deleted\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseUrl}}/quiz/{{quizId}}"
			},
			"response": []
		},
		{
			"name": "/assignment [Teacher] Deletes group of assignments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body matches string - Assignment was deleted\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Assignment was deleted\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/assignment/{{assignmentGroupId}}"
			},
			"response": []
		},
		{
			"name": "/forgot-password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Reset password email was sent\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{studentEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/forgot-password"
			},
			"response": []
		},
		{
			"name": "localhost:3000/ Reset pasword activation code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData=pm.response.json();\r",
							"\r",
							"pm.environment.set(\"activationCode\", jsonData[0].activationCode);\r",
							"pm.environment.set(\"studentId\", jsonData[0].id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,{{studentEmail}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/reset-password/:userId/:activationCode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string - Password was changed\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Password was changed\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"password\": \"myNewPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/reset-password/{{studentId}}/{{activationCode}}"
			},
			"response": []
		},
		{
			"name": "/users [Teacher] Changes user's role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string - User role was updated\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"User role was updated\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": \"TEACHER\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/users/change-role/{{studentId}}"
			},
			"response": []
		},
		{
			"name": "/users [Teacher] Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string - User was deleted\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Body matches string - User was deleted\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/users/{{studentId}}"
			},
			"response": []
		}
	]
}